// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StockFlow.Infrastructure.Common;

#nullable disable

namespace StockFlow.Infrastructure.Migrations
{
    [DbContext(typeof(StockFlowDbContext))]
    partial class StockFlowDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-rc.1.23419.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PositionExclusivMaterials", b =>
                {
                    b.Property<long>("ExclusiveMaterialsId")
                        .HasColumnType("bigint");

                    b.Property<long>("PositionsId")
                        .HasColumnType("bigint");

                    b.HasKey("ExclusiveMaterialsId", "PositionsId");

                    b.HasIndex("PositionsId");

                    b.ToTable("PositionExclusivMaterials");
                });

            modelBuilder.Entity("StockFlow.Domain.ActionLogs.ActionLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ObjectJsonValue")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("ActionLogs");
                });

            modelBuilder.Entity("StockFlow.Domain.Locations.Position", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("MaxAllowed")
                        .HasColumnType("int");

                    b.Property<int>("MinAlert")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<long>("RackId")
                        .HasColumnType("bigint");

                    b.Property<string>("SizeTypes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("RackId", "Name")
                        .IsUnique();

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("StockFlow.Domain.Locations.Rack", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Racks");
                });

            modelBuilder.Entity("StockFlow.Domain.Materials.Material", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)");

                    b.Property<string>("SizeType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PartNumber")
                        .IsUnique();

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("StockFlow.Domain.Stocks.Stock", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("BatchDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("ExpireDate")
                        .HasColumnType("date");

                    b.Property<long>("MaterialId")
                        .HasColumnType("bigint");

                    b.Property<long>("PositionId")
                        .HasColumnType("bigint");

                    b.Property<string>("TimeStamp")
                        .IsRequired()
                        .HasColumnType("varchar(48)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("PositionId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("PositionExclusivMaterials", b =>
                {
                    b.HasOne("StockFlow.Domain.Materials.Material", null)
                        .WithMany()
                        .HasForeignKey("ExclusiveMaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockFlow.Domain.Locations.Position", null)
                        .WithMany()
                        .HasForeignKey("PositionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StockFlow.Domain.Locations.Position", b =>
                {
                    b.HasOne("StockFlow.Domain.Locations.Rack", "Rack")
                        .WithMany("Positions")
                        .HasForeignKey("RackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rack");
                });

            modelBuilder.Entity("StockFlow.Domain.Stocks.Stock", b =>
                {
                    b.HasOne("StockFlow.Domain.Materials.Material", "Material")
                        .WithMany("Stocks")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockFlow.Domain.Locations.Position", "Position")
                        .WithMany("Stocks")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("StockFlow.Domain.Locations.Position", b =>
                {
                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("StockFlow.Domain.Locations.Rack", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("StockFlow.Domain.Materials.Material", b =>
                {
                    b.Navigation("Stocks");
                });
#pragma warning restore 612, 618
        }
    }
}
